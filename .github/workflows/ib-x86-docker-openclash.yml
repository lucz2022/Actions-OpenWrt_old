name: IB x86_64 (Docker + Clash runtime + Offload) 24.10.2

on:
  workflow_dispatch:

env:
  # ===== 使用稳定版 24.10.2 =====
  OWRT_TREE: releases/24.10.2
  TARGET: x86
  SUBTARGET: 64
  PROFILES: "generic generic-efi"   # 两种都打；只要其一就改成单个
  TZ: Asia/Shanghai

  # ===== 一行包清单（官方源可用；不要换行）=====
  # Clash 运行环境（fw4/nft/tproxy/dnsmasq-full）+ Docker + I226(igc) + PVE/Hyper-V 驱动 + 基本加速(offload)
  PACKAGES: "dnsmasq-full -dnsmasq -dnsmasq-dhcpv6 firewall4 nftables iptables-nft kmod-nf-conntrack kmod-nf-nat kmod-nft-nat kmod-nft-tproxy kmod-nft-socket kmod-nft-offload kmod-tun kmod-inet-diag ca-bundle ca-certificates curl wget-ssl unzip bash coreutils-nohup ip-full luci luci-compat luci-app-firewall dockerd docker containerd kmod-veth kmod-br-netfilter kmod-fs-overlay kmod-fs-ext4 irqbalance ethtool kmod-igc kmod-virtio kmod-virtio-net kmod-virtio-blk kmod-virtio-scsi kmod-virtio-console kmod-balloon kmod-hv-vmbus kmod-hv-netvsc kmod-hv-storvsc"

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init build env
        shell: bash
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y ca-certificates curl xz-utils zstd tar coreutils
          sudo timedatectl set-timezone "$TZ"
          df -hT

      # 直接从稳定版目录自动识别 .tar.zst
      - name: Download ImageBuilder (.tar.zst from releases/24.10.2)
        shell: bash
        run: |
          set -e
          BASE="https://downloads.openwrt.org/${OWRT_TREE}/targets/${TARGET}/${SUBTARGET}"
          echo "Base: $BASE"
          IB_FILE="$(curl -fsSL "$BASE/" | grep -o 'openwrt-imagebuilder-[^"]*Linux-x86_64\.tar\.zst' | head -n1)"
          test -n "$IB_FILE" || { echo "No ImageBuilder .tar.zst found on $BASE"; exit 8; }
          echo "Downloading: $BASE/$IB_FILE"
          curl -fL --retry 5 --retry-delay 2 -o ib.tar.zst "$BASE/$IB_FILE"
          tar --zstd -xf ib.tar.zst
          IB_DIR="$(tar -tf ib.tar.zst | head -n1 | cut -d/ -f1)"
          echo "IB_DIR=$IB_DIR" >> $GITHUB_ENV
          echo "IB_DIR=$IB_DIR"

      - name: Prepare FILES (enable flow offload; docker bridge sysctl)
        shell: bash
        run: |
          set -e
          cd "$IB_DIR"
          # 合并你仓库的 files/（若存在）
          if [ -d "${GITHUB_WORKSPACE}/files" ]; then
            cp -a "${GITHUB_WORKSPACE}/files" .
          else
            mkdir -p files
          fi
          # 开机启用软件/硬件 flow offload（官方加速）
          mkdir -p files/etc/uci-defaults
          cat > files/etc/uci-defaults/99-flow-offload << 'EOF'
          #!/bin/sh
          uci -q set firewall.@defaults[0].flow_offloading='1'
          uci -q set firewall.@defaults[0].flow_offloading_hw='1'
          uci -q commit firewall
          exit 0
          EOF
          chmod +x files/etc/uci-defaults/99-flow-offload

          # Docker 桥过滤（保险起见）
          mkdir -p files/etc/sysctl.d
          cat > files/etc/sysctl.d/90-bridge-nf.conf << 'EOF'
          net.bridge.bridge-nf-call-iptables=1
          net.bridge.bridge-nf-call-ip6tables=1
          EOF

      # （可选）把你准备好的本地 ipk（例如 luci-app-openclash）放到仓库根 pkgs/ 目录即可一起打包
      - name: (optional) Local pkgs repo (pkgs/*.ipk e.g. luci-app-openclash)
        shell: bash
        run: |
          set -e
          cd "$IB_DIR"
          if [ -d "${GITHUB_WORKSPACE}/pkgs" ]; then
            mkdir -p pkgs
            cp -a "${GITHUB_WORKSPACE}/pkgs/"* pkgs/ || true
          fi
          if [ -d pkgs ] && ls pkgs/*.ipk >/dev/null 2>&1; then
            echo "[IB] Found local ipk(s); building local repo..."
            ./staging_dir/host/bin/opkg-make-index pkgs > pkgs/Packages
            gzip -9c pkgs/Packages > pkgs/Packages.gz
            echo "src custom file:pkgs" >> repositories.conf
            # 需要把 luci-app-openclash 打进固件：把它的 ipk 放 pkgs/ 下，
            # 然后把包名追加到 env.PACKAGES 即可。
          else
            echo "[IB] No pkgs/*.ipk provided; skip local repo."
          fi

      - name: Build images
        shell: bash
        run: |
          set -e
          cd "$IB_DIR"
          echo "PACKAGES=${PACKAGES}"
          for p in ${PROFILES}; do
            echo "=== Build profile: $p ==="
            make image PROFILE="$p" PACKAGES="${PACKAGES}" FILES=files/ || { echo "Build failed: $p"; exit 1; }
          done
          ls -lh "bin/targets/${TARGET}/${SUBTARGET}/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: IB-x86_64-openclash-docker-${{ github.run_id }}
          path: ${{ env.IB_DIR }}/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/*
